 
 
 
 
 
 
            ART MATRIX  PO 880  Ithaca, NY  14851-0880  USA
           1 800 PAX-DUTY or (607) 277-0959  24 Hours a Day.
          Dr. John Hamal Hubbard Dynamical Systems Laboratory
 
            'The Paths of Lovers Cross in the Line of Duty.'
 
                        FORTRAN SOURCE PROGRAMS
 
                    Copyright (C) 1985 by ART MATRIX
                          All rights Reserved.
 
     This disk may be copied freely and redistributed by any means, for
non commercial purposes.  If you have not already paid for this disk,
and you like it and you can afford to, please send $5.00 to ART MATRIX
PO 880 Ithaca, NY 14851-0880.  This payment is not obligatory but is
welcome.
     Questions concerning the code contained herein should be directed
to Homer Wilson Smith at the above address or (607) 277-0959.
 
     The Art Matrix Team, Homer and Jane.
 
 
Dear Fractalier,
 
     These programs are right off our printer.  Their accuracy can not
be guaranteed because they are in a constant state of change.  However
they are as we use them, and so in general the copy you receive is the
copy we are using.
     There is little to no documentation for these programs but they are
all the same except for the differences inherent in the equations that
they compute.
     Each program is very simple and should be self documenting to
anyone who understands fortran.  If you have questions please feel free
to ask them as I am more than willing to help you get these programs
implemented and running.
     The programs MANDIN.EXE, MAND4M.FOR and MAND4F.FOR are more fully
documented inside them in order to provide you a template for for
further understanding the other programs.  MANDIN.EXE is NOT an
executable DOS file, the EXE is short for EXEC, a CMS filetype.  The
*IN.EXE and *4M.FOR files for all the other programs are not included as
their function and design should be obvious.  It is the *4F programs
that do the actual fractal computation, the *4M programs merely read in
the proper parameters and save the final image to disk, a procedure
which will be very different on your PC anyhow.
     The 4 in the MAND4M name refers to the 400 by 400 resolution, and
the F and M in the names MAND4M and MAND4F are arbitrary letters keeping
the two programs separate.  MAND4M reads in the parameters and then
calls MAND4F which does the computation.  All of our programs have the
exact same structure.
 
     There are two parts to making a fractal.  The first is to compute
the fractal itself and store the results in a matrix stored on disk.
The second is to display the information that is stored on disk as a
picture on your graphics screen.
 
 
 
 
 
 
 
 
 
 
                                                                  PAGE 2
 
     If your PC does not have the room to store a whole matrix you may
have to display each pixel as it is computed.  This is something that
you will have to figure out for yourself.  The programs presented here
are the way we do it on the mainframes.
     I have included two programs for displaying the final output matrix
which is generated by the other programs.  In general each fractal may
be slightly different in how it is stored in its matrix on disk.
Therefore the display program has to be different to account for these
differences in the fractals.  For example the quadratics are the
simplest, each position stores either a 0 or an iteration number.  But
the cubics have a third condition that is stored as a minus one.  This
minus one is the white area that you see on some of the pictures in our
brochures.  (For example any image with a name starting with CB or CC.)
     Thus the display program suitable for the simple quadratics would
not work for the cubics which have those -1's in them.  Again it is
assumed that you will be able to figure out the display process yourself
according to the needs of your PC.  We provide the two sample display
programs as a template for your understanding.
     I have only included the display programs for the quadratics as you
can make the necessary changes to accommodate the data generated by the
other fractal programs.  As you study the fractal source code you will
be able to see what is stored in the matrix and so what changes must be
made to the display program to put them out properly.
     Each fractal matrix that is stored on disk has also stored with it
another readable file that contains all the information necessary to
create the fractal image.  This include X and Y lower left, side
lengths, iteration counts, and other parameters.  Each parameter file we
have done (many of which are on the coordinate set disk) contains the
name of the input program that produced it such as MANDIN.  Thus you can
know which program made which image.  For example image M23 was produced
by MANDIN which called MAND4M which called MAND4F which is on this disk.
     Since the *IN and *4M files are in general NOT on this disk, you
will be looking for the *4F file that corresponds to the entry in the
parameter file.  For example the image CB2B4A5 has the program name CBIN
in its parameter file, which means YOU should look for CB4F on this
disk.
     In general the input programs transfer the needed parameters to the
computation subroutine which then proceeds to scan the matrix and
produce the image.  Our matrices are 401 by 401 pixels in dimension.
These pixels are numbered 0 to 400.  We also have other size formats
such as 400 by 500, 800 by 1000, and 1000 by 1000.  Most of these
programs assume a square side length, but you should chose for yourself
what the resolution of your images will be and what their aspect ratio
is.
     Most of the programs store two results.  One is the number of
iterations it took for the iteration to go to infinity and the other is
the angle of the final answer.  We of course do not wait for the numbers
to actually go to infinity but some escape value representative of
infinity.  If the iteration result NEVER goes to infinity after 1000 or
so iterations a 0 is stored in the matrix.  1000 iterations may be too
much for those of you with personal computers.  You may wish to try 100
instead.
     1000 iterations is neither right nor wrong.  If you iterate too
little your pictures will come out looking UNDER ITERATED.  If you
 
 
 
 
 
 
 
 
 
 
                                                                  PAGE 3
 
iterate too much they may look OVER ITERATED.  There is an aesthetic
best choice which can only be determined by the user.  Of course
mathematically the more iterations you use the more accurate the picture
will look, but not necessarily as pretty.
     The ANGLE data is important.  Thus when the data is displayed on
the screen you must choose which of the two you want to look at,
iteration data or angle data.  On our slide set M23 is an example of
looking at the ITERATION data and R4C is an example of looking at ANGLE
data.  Both can show both.  If you wish you can leave out the angle data
and just store the iteration data.  Or visa versa.
     The programs starting with J are the JULIA set programs of the same
name not starting with J.  The names are not totally consistent and the
equations they run can only be told by looking at the code.  For example
JMN4F is the julia code for the MAND4F mandelbrot code.
     In general each program consists of some identical beginning and
ending code which sets up the xlow and ylow and increment numbers to
scan the space of the matrix.  The actual iteration is usually contained
inside the inner most DO LOOP.  It is here you should look for the
equation that is iterated.  Remember that for some equations like the
cubics, a two dimensional plane (slice) must be taken before the
iteration can begin.  This is usually done earlier in the program.
     (Special note.  For the longest time we wrote all our programs to
scan the matrix involved with a standard algorithm.  This algorithm is
represented by the DO 1000 and DO 2000 loops in almost all of the
enclosed programs.  It turns out that for very deep zooms this method of
scanning the matrix is not accurate.  Thus in MAND4F you will find the
two DO loops have been rewritten in a better and simpler algorithm.  It
is slightly slower, but the time involved in scanning a matrix is nill
compared to the time involved in iterating every point.  We recommend
you use the scanning algorithm used in MAND4F and replace that used in
the other programs with the same algorithm.  One day I will go through
and edit all our programs to make the change.)
     The MANDELBROT and JULIA sets for quadratics are MAND4F and JMN4F.
Image R4C was done by RAT44F (RAT stands for RATIONAL MAP.)  Image JLR4B
was computed by JR44F.  The programs JR44F and RAT44F are the Julia and
Mandelbrot sides of the same rational map equation.  Thus R4C is a
Mandelbrot set picture, and JLR4B is a Julia set picture.  JZP13 was
computed by JLN4F which is NEWTON'S method for CUBICS.  ZOOM4F is the
Mandelbrot side of JLN4F.  ZOOM4F is the only one with a wildly
incorrect name.  But it was the first program we ever did and of course
it was a ZOOMING in of the Mandelbrot set for Newton's method on cubics.
     JPQ4F is a VERY interesting program for computing the boundary of
the quadratic Julia set and should be of interest to those of you with
slower computers or monochrome display tubes.  It gives very pretty and
intricate pictures for values of C near the boundaries of the Mandelbrot
set.  It works by taking the reverse images of the right hand fixed
point on the Julia Set as described in 'Mandelbrot Sets and Julia Sets'.
     Also included are copies of P14H and P14HM.  P14H stands for
PROCEDURE 1 for a 4 HUNDRED by 4 HUNDRED screen.  (401 actually.)  The M
in P14HM stands for MODULO which is used to recover the ANGLE data.  The
modulo function is used to separate out the angle data from the
iteration data.  These are display programs for the quadratic Mandelbrot
and Julia sets.  They are extensively documented inside the program.
P14H displays the iteration data and P14HM displays the ANGLE data.  In
 
 
 
 
 
 
 
 
 
 
                                                                  PAGE 4
 
our case we use these two programs long after the image is computed and
stored on disk.  They separate out the two kinds of stored data,
iteration and angle, and turn the image into proper color numbers.
     I suggest you try the quadratics before you tackle the cubics.
Also the exponential fractals (EXP4F, JEXP4F) are very interesting.  The
DUAL CRITICAL POINT CUBICS (C4F and JC4F) will take some thought.  They
are the ones that produced F1AAAA in our slide set.  The pictures
starting with CB and CC were produced by CB4F and CC4F.  These are
really pretty and need only minor corrections of the display programs to
take into account the white areas that are stored as minus 1 in the
matrix.  The entire series of programs of the form CB4F, CC4F, CD4F,
CE4F etc, are all different two dimensional slices through the same
basic cubic.  They produce very different pictures though.
     If you would like to try iterating BOTH Z AND C as explained in
'The Cell and the Womb' try MAN64F.  Lorentz attractors can be made with
LOR4F, and quadratic Mandelbrot cascade images can be made with MC4F.
     Have fun and let me know if you get lost.  We want everyone to
understand and have a good time with fractals.  If you get bogged down
give me call.  I love to talk about this stuff.  Especially if it will
help you get your programs running and your mind in motion.
 
 
 
                                                 Homer W. Smith
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                                                                  PAGE 5
 
The following is a sample image parameter file for our images.  The
coordinate set disk has about 300 of these for your enjoyment.
 
     The very first line is a code to let the program know that it is
truly reading a parameter file.  It is unlikely any other file would
begin with ! 3.
     The next line contains the name of the image (M23), the name of the
program that created it (MANDIN), the real time it took to compute the
image (1:45) and the time and date of the run.
     The next two lines contain flow information so that the display
programs can read and show the image properly.  The PARM code (10) tells
the program reading this parm file the format of the data following this
line.  Different images have differing amounts of data specifying the
coordinates.  Julia sets for example have two more numbers specifying
the real and imaginary parts of the parameter used to create the Julia
set.  The DATA code specifies that this image is stored as a 401 by 401
run length encoded file.  The MAP code is the default color map number.
The PROCEDURE code tells our programs which display procedure to use to
display the image such as P14H mentioned above.
     The next lines contain the pertinent data specifying the lower left
hand corner (X LOW and Y LOW) and the side length (SIDE), the maximum
iteration used and the modulo necessary to separate out the ANGLE data
from the ITERATION data.
 
!    3
 
M23      MANDIN      1:45        07/13/84  7:05 PM
 
   PARM:   DATA:    MAP:   PROC:
      10     420      21       1
 
   -0.13312499999999998200D+01 X LOW
    0.19374999999999986700D+00 Y LOW
    0.25000000000000000000D+00 X SIDE
    0.25000000000000000000D+00 Y SIDE
                          1000 ITERATIONS
                             5 MODULO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
